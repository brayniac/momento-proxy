name: on-push-to-main

on:
  push:
    branches: [main]

permissions:
  contents: write # to bump version, create a tag, write CHANGELOG, etc.
  pull-requests: write # to open/update the Release PR

env:
  IMAGE_NAME: gomomento/momento-proxy

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-24.04
    outputs:
      release_created: ${{ steps.rp.outputs.release_created }}
      tag_name: ${{ steps.rp.outputs.tag_name }}
      version: ${{ steps.rp.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Release Please
        id: rp
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

  #  publish-docker:
  #    name: Publish Docker Image
  #    runs-on: ubuntu-24.04
  #    needs: release-please
  #    if: ${{ needs.release-please.outputs.release_created == 'true' }}
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v4
  #        with:
  #          fetch-depth: 0
  #
  #      - name: Checkout the new Release Please tag
  #        run: |
  #          git fetch --tags
  #          git checkout ${{ needs.release-please.outputs.tag_name }}
  #
  #      # QEMU setup for arm64 emulation on x86 runner
  #      # TODO: this is really slow, so we should consider using a self-hosted runner with arm64 architecture
  #      - name: Set up QEMU
  #        uses: docker/setup-qemu-action@v3
  #
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v3
  #
  #      - name: Log in to Docker Hub
  #        uses: docker/login-action@v3
  #        with:
  #          username: ${{ secrets.DOCKERHUB_USERNAME }}
  #          password: ${{ secrets.DOCKERHUB_PASSWORD }}
  #
  #      - name: Build & push Docker image
  #        uses: docker/build-push-action@v6
  #        with:
  #          context: .
  #          push: true
  #          platforms: linux/amd64,linux/arm64
  #          # Tag under the version (e.g. “1.2.3”) and also “latest”
  #          tags: |
  #            ${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
  #            ${{ env.IMAGE_NAME }}:latest
  #          cache-from: type=gha
  #          cache-to: type=gha,mode=max

  build-binaries:
    name: Build & upload binaries (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
          # Linux MUSL
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            arch: amd64-musl
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            arch: arm64-musl
          # macOS
          - os: macos-15
            target: x86_64-apple-darwin
            arch: macos-amd64
          - os: macos-15
            target: aarch64-apple-darwin
            arch: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout tag ${{ needs.release-please.outputs.tag_name }}
        run: |
          git fetch --tags
          git checkout ${{ needs.release-please.outputs.tag_name }}

      - name: Install cross-compilation tools (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Build & upload to GitHub Release
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: momento_proxy
          ref: refs/tags/${{ needs.release-please.outputs.tag_name }}
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          tar: unix
          zip: none
          build-tool: cargo
          token: ${{ secrets.GITHUB_TOKEN }}
